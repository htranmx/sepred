import numpy as np

def read_effect_list(filename, verbosity=False):
    """returns sorted list of side effects found in <filename>"""
    with open(filename) as el:
        ellines = el.readlines()
    efl = set()
    for ell in ellines:
        if ell.strip():
            efl.add(ell.strip())
    efl = list(efl)
    efl.sort()
    if verbosity:
        print "possible effects: {0}, from {1}".format(len(efl), filename)
    return efl

def read_attributes(filename, verbosity=False):
    """read attribues for each item in the dataset from <filename>"""
    attdat = {}
    nattr = -1
    with open(filename) as af:
        aflines = af.readlines()
    for afl in aflines:
        afls = afl.strip().split(',')
        dbname = afls[2].strip()
        if dbname:
            # attdat[dbname] =
            if nattr < 0:
                nattr = len(afls[3:])
            elif nattr != len(afls[3:]):
                print "read_attributes: Number of attributes not consistent {0}, {1}".format(nattr, len(afls[3:]))
                raise RuntimeError()
            attdat[dbname] = np.array(afls[3:], dtype='float')
    if verbosity:
        print "attribute dataset: {1} attributes for {0} items with drugbank ID, from {2}".format(len(attdat), nattr, filename)
    return attdat

def effects_to_binary(search_effects, effectlist, verbosity=False):
    """returns a binary array of length len(effectlist) where occurences of elements in
    search_effects are 1, and others 0"""
    retval = np.zeros(len(effectlist), dtype='int')
    for ie in range(len(effectlist)):
        if effectlist[ie] in search_effects:
            retval[ie] = 1
    return retval

def binary_to_effects(binary_mask, effectlist, verbosity=False):
    """returns a list of effects, given the binary mask generated by effects_to_binary_mask"""
    retval = []
    for ie in np.nonzero(binary_mask)[0]:
        retval.append(effectlist[ie])
    retval = list(set(retval))
    retval.sort()
    return retval

def read_effects(filename, effectlist, verbosity=False):
    """read effects for each item in dataset from <filename> and generates a mask by comparing
    to the list of effects <efl> (generated by read_effect_list).
    Returns effdat. To get the list of effects for <item>, do call
    binary_to_effects(effdat[item], effectlist)."""
    effdat = {}
    with open(filename) as ef:
        eflines = ef.readlines()
    for efl in eflines:
        efls = efl.split(',')
        dbname = efls[0].strip()
        effect = efls[2].strip()
        if dbname in effdat:
            effdat[dbname].append(effect)
        else:
            effdat[dbname] = [effect]
    for item in effdat:
        effdat[item] = effects_to_binary(effdat[item], effectlist)
    if verbosity:
        print "Found {0} items with effects, in {1}".format(len(effdat), filename)
    return effdat

def generate_effect_list(filename, verbosity=False):
    """generates a list of unique effects found in the dataset"""
    efl = []
    with open(filename) as ef:
        eflines = ef.readlines()
    for efline in eflines:
        efls = efline.split(',')
        dbname = efls[0].strip()
        effect = efls[2].strip()
        efl.append(effect)
    efl = list(set(efl))
    efl.sort()
    if verbosity:
        print "{0} effects found in dataset from from {1}".format(len(efl), filename)
    return efl
